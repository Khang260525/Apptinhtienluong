const CACHE_NAME = 'jpy-work-log-cache-v2';
// Danh sách các file cần được lưu vào cache để chạy offline
const urlsToCache = [
    './',
    './index.html',
    './manifest.json',
    'https://cdn.tailwindcss.com', // Tailwind CSS CDN
    // Thêm các file icon bạn sử dụng vào đây nếu cần
    // Ví dụ: './icon-192.png', './icon-512.png' 
];

// Sự kiện: INSTALL (Cài đặt) - Lưu tất cả tài nguyên vào cache
self.addEventListener('install', (event) => {
  console.log('[Service Worker] Install Event');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[Service Worker] Caching App Shell');
        return cache.addAll(urlsToCache);
      })
  );
});

// Sự kiện: ACTIVATE (Kích hoạt) - Xóa các cache cũ
self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activate Event');
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('[Service Worker] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// Sự kiện: FETCH (Truy cập) - Phục vụ tài nguyên từ cache (offline-first)
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // Cache hit - trả về response từ cache
        if (response) {
          return response;
        }
        // Thử fetch từ mạng nếu không có trong cache
        return fetch(event.request);
      }
    )
  );
});